#include <iostream>
#include "adf/adf_api/AIEControlConfig.h"


/************************** Graph Configurations  *****************************/

  adf::GraphConfig GraphConfigurations[] = {
  //{id, name, graphLoadElfFunc, graphInitFunc, graphDebugHalt, coreColumns, coreRows, iterMemColumns, iterMemRows, iterMemAddrs, triggered, plKernelInstanceNames, plAxiLiteModes, plDriverStartFuncs, plDriverCheckIPDoneFuncs}
    {0, "myGraph", nullptr, nullptr, nullptr, {2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49}, {0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 1, 2, 1, 2, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 11, 10, 10, 10, 11, 11, 11, 10, 11, 11, 11, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 26, 25, 25, 25, 26, 26, 26, 25, 26, 26, 26, 25, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 30, 29, 29, 28, 29, 30, 30, 30, 30, 29, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 37, 38, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 44, 43, 43, 43, 43, 44, 44, 43, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 48, 49}, {0, 0, 2, 2, 4, 4, 6, 7, 0, 0, 2, 2, 4, 4, 6, 6, 0, 0, 3, 3, 4, 4, 6, 6, 0, 0, 2, 2, 4, 4, 7, 7, 0, 0, 2, 2, 4, 4, 6, 6, 0, 0, 2, 2, 4, 4, 6, 6, 0, 0, 3, 4, 3, 4, 6, 6, 0, 0, 2, 2, 4, 4, 7, 7, 0, 0, 2, 3, 4, 4, 6, 7, 0, 0, 2, 4, 3, 4, 6, 7, 0, 0, 2, 2, 4, 4, 6, 6, 0, 0, 2, 2, 4, 4, 7, 7, 0, 0, 2, 2, 4, 4, 7, 7, 0, 0, 2, 2, 4, 4, 6, 7, 0, 0, 2, 2, 4, 4, 6, 7, 0, 0, 3, 3, 4, 4, 6, 6, 0, 0, 2, 2, 4, 4, 6, 6, 0, 0, 3, 3, 4, 4, 6, 6, 0, 0, 2, 2, 4, 4, 6, 6, 0, 0, 2, 2, 4, 4, 6, 6, 0, 0, 2, 2, 4, 4, 6, 6, 0, 0, 3, 3, 4, 4, 7, 7, 0, 0, 3, 3, 4, 4, 6, 6, 0, 0, 2, 3, 4, 4, 6, 7, 0, 0, 2, 3, 4, 4, 6, 7, 0, 0, 3, 4, 3, 4, 7, 7, 0, 0, 2, 2, 4, 4, 6, 7, 0, 0, 3, 3, 3, 4, 6, 7, 0, 0, 3, 4, 4, 4, 6, 6, 0, 0, 3, 3, 4, 4, 6, 6, 0, 0, 3, 4, 3, 4, 6, 6, 0, 0, 3, 3, 4, 4, 6, 6, 0, 0, 2, 2, 4, 4, 7, 7, 0, 0, 3, 4, 3, 4, 7, 7, 0, 0, 3, 4, 3, 4, 7, 7, 0, 0, 2, 2, 4, 4, 6, 7, 0, 0, 2, 2, 4, 4, 6, 7, 0, 0, 2, 2, 4, 4, 6, 6, 0, 0, 3, 3, 4, 4, 6, 6, 0, 0, 3, 3, 4, 4, 7, 7, 0, 0, 2, 2, 4, 4, 7, 7, 0, 0, 2, 3, 4, 4, 7, 7, 0, 0, 2, 4, 3, 4, 7, 7, 0, 0, 3, 4, 3, 4, 6, 6, 0, 0, 3, 3, 4, 4, 6, 6, 0, 0, 3, 3, 4, 4, 6, 6, 0, 0, 3, 3, 4, 4, 6, 7, 0, 0, 2, 2, 4, 4, 6, 7}, {0xf44, 0x4004, 0xf44, 0x4004, 0xf44, 0xf44, 0x2004, 0xf44, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0xf44, 0x2004, 0xf44, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x2004, 0x4004, 0x4004, 0x2004, 0x4004, 0x4004, 0x2004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x2004, 0x4004, 0x2004, 0x4004, 0x4004, 0x2004, 0x4004, 0x4004, 0x4, 0x4004, 0x4004, 0x2004, 0x2004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x4004, 0x2004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x4004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4f44, 0x2004, 0x4004, 0x2004, 0x2004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2f44, 0x6004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x2004, 0x2004, 0x4004, 0x4004, 0x4004, 0x2004, 0x4004, 0x4004, 0x4004, 0x2004, 0x4004, 0x2004, 0x2004, 0x2004, 0x4004, 0x2004, 0x2004, 0x4004, 0x4004, 0x6004, 0x2004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x4004, 0x4004, 0x2004, 0x4004, 0x2004, 0x2004, 0x4004, 0x4004, 0x2004, 0x2004, 0x2004, 0x4004, 0x4004, 0x2004, 0x2004, 0x4004, 0x4004, 0x2004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x2004, 0x4004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x4, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x2004, 0x4004, 0x4004, 0x4004, 0x2004, 0x2004, 0x4004, 0x2004, 0x2004, 0x4004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x4004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x2004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x4004, 0x2004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x2004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x4004, 0x2004, 0x4004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x2004, 0x4004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x4004, 0x2f44, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x6004, 0x2004, 0x4004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x4004, 0x2004, 0x2004}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {}, {}, {}, {},  }, 
  };
  const int NUM_GRAPH = 1;

/************************** PLIO Configurations  *****************************/

  adf::PLIOConfig PLIOConfigurations[] = {
  //{id, name, loginal_name, shim_column, slaveOrMaster, streamId}
    {0, "in_r0", "in_r0", 7, 0, 0},
    {1, "in_r1", "in_r1", 10, 0, 0},
    {2, "in_r2", "in_r2", 11, 0, 0},
    {3, "in_r3", "in_r3", 17, 0, 0},
    {4, "in_r4", "in_r4", 20, 0, 0},
    {5, "in_r5", "in_r5", 23, 0, 4},
    {6, "in_r6", "in_r6", 27, 0, 0},
    {7, "in_r7", "in_r7", 33, 0, 0},
    {8, "in_r8", "in_r8", 36, 0, 0},
    {9, "in_r9", "in_r9", 42, 0, 0},
    {10, "in_r10", "in_r10", 44, 0, 4},
    {11, "in_r11", "in_r11", 43, 0, 0},
    {12, "in_r12", "in_r12", 44, 0, 0},
    {13, "in_r13", "in_r13", 41, 0, 0},
    {14, "in_r14", "in_r14", 42, 0, 4},
    {15, "in_r15", "in_r15", 36, 0, 4},
    {16, "in_r16", "in_r16", 33, 0, 4},
    {17, "in_r17", "in_r17", 30, 0, 4},
    {18, "in_r18", "in_r18", 24, 0, 4},
    {19, "in_r19", "in_r19", 20, 0, 4},
    {20, "in_r20", "in_r20", 17, 0, 4},
    {21, "in_r21", "in_r21", 11, 0, 4},
    {22, "in_r22", "in_r22", 8, 0, 0},
    {23, "in_r23", "in_r23", 8, 0, 4},
    {24, "in_c0", "in_c0", 13, 0, 4},
    {25, "in_c1", "in_c1", 35, 0, 4},
    {26, "in_c2", "in_c2", 19, 0, 0},
    {27, "in_c3", "in_c3", 39, 0, 4},
    {28, "in_c4", "in_c4", 16, 0, 4},
    {29, "in_c5", "in_c5", 32, 0, 4},
    {30, "in_c6", "in_c6", 14, 0, 4},
    {31, "in_c7", "in_c7", 30, 0, 0},
    {32, "in_c8", "in_c8", 16, 0, 0},
    {33, "in_c9", "in_c9", 39, 0, 0},
    {34, "in_c10", "in_c10", 18, 0, 0},
    {35, "in_c11", "in_c11", 28, 0, 0},
    {36, "in_c12", "in_c12", 23, 0, 0},
    {37, "in_c13", "in_c13", 25, 0, 4},
    {38, "in_c14", "in_c14", 25, 0, 0},
    {39, "in_c15", "in_c15", 26, 0, 0},
    {40, "in_c16", "in_c16", 38, 0, 0},
    {41, "in_c17", "in_c17", 26, 0, 4},
    {42, "in_c18", "in_c18", 27, 0, 4},
    {43, "in_c19", "in_c19", 21, 0, 4},
    {44, "in_c20", "in_c20", 38, 0, 4},
    {45, "in_c21", "in_c21", 24, 0, 0},
    {46, "in_c22", "in_c22", 29, 0, 0},
    {47, "in_c23", "in_c23", 22, 0, 0},
    {48, "in_c24", "in_c24", 29, 0, 4},
    {49, "in_c25", "in_c25", 21, 0, 0},
    {50, "in_c26", "in_c26", 31, 0, 0},
    {51, "in_c27", "in_c27", 13, 0, 0},
    {52, "in_c28", "in_c28", 32, 0, 0},
    {53, "in_c29", "in_c29", 19, 0, 4},
    {54, "in_c30", "in_c30", 35, 0, 0},
    {55, "in_c31", "in_c31", 14, 0, 0},
    {56, "out_r0", "out_r0", 9, 1, 2},
    {57, "out_r1", "out_r1", 6, 1, 2},
    {58, "out_r2", "out_r2", 12, 1, 2},
    {59, "out_r3", "out_r3", 15, 1, 4},
    {60, "out_r4", "out_r4", 18, 1, 0},
    {61, "out_r5", "out_r5", 24, 1, 0},
    {62, "out_r6", "out_r6", 27, 1, 0},
    {63, "out_r7", "out_r7", 31, 1, 0},
    {64, "out_r8", "out_r8", 29, 1, 0},
    {65, "out_r9", "out_r9", 37, 1, 4},
    {66, "out_r10", "out_r10", 40, 1, 0},
    {67, "out_r11", "out_r11", 43, 1, 2},
    {68, "out_r12", "out_r12", 41, 1, 0},
    {69, "out_r13", "out_r13", 43, 1, 4},
    {70, "out_r14", "out_r14", 37, 1, 2},
    {71, "out_r15", "out_r15", 35, 1, 0},
    {72, "out_r16", "out_r16", 32, 1, 0},
    {73, "out_r17", "out_r17", 25, 1, 0},
    {74, "out_r18", "out_r18", 22, 1, 0},
    {75, "out_r19", "out_r19", 20, 1, 0},
    {76, "out_r20", "out_r20", 15, 1, 2},
    {77, "out_r21", "out_r21", 12, 1, 4},
    {78, "out_r22", "out_r22", 6, 1, 4},
    {79, "out_r23", "out_r23", 9, 1, 4},
  };
  const int NUM_PLIO = 80;


/************************** ADF API initializer *****************************/

  class InitializeAIEControlXRT
  {
  public:
    InitializeAIEControlXRT()
    {
      std::cout<<"Initializing ADF API..."<<std::endl;
#ifdef __EXCLUDE_PL_CONTROL__
      bool exclude_pl_control = true;
#else
      bool exclude_pl_control = false;
#endif
      adf::initializeConfigurations(nullptr, 0, 0, 0,
                                    GraphConfigurations, NUM_GRAPH,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    PLIOConfigurations, NUM_PLIO,
                                    nullptr, 0, 0, nullptr,
                                    false, exclude_pl_control, false, nullptr
                                    , false);

    }
  } initAIEControlXRT;



#if !defined(__CDO__)

// Kernel Stub Definition
  void mm_kernel0(input_window<float> *,input_window<float> *,output_window<float> *) { /* Stub */ } 
  void mm_kernel1(input_window<float> *,input_window<float> *,input_window<float> *,output_window<float> *) { /* Stub */ } 
#endif
